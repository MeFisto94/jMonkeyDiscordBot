package com.github.MeFisto94.jMonkeyDiscordBot;

import com.github.MeFisto94.jMonkeyDiscordBot.Commands.JavadocCommand;
import com.github.MeFisto94.jMonkeyDiscordBot.Commands.SearchCommand;
import com.github.MeFisto94.jMonkeyDiscordBot.Git.GitRepo;
import com.jagrosh.jdautilities.command.CommandClientBuilder;
import net.dv8tion.jda.api.AccountType;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.OnlineStatus;
import net.dv8tion.jda.api.entities.Activity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.security.auth.login.LoginException;
import java.io.File;
import java.nio.file.Files;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Stream;

public class Main {
    public static final boolean javadocAsCode = false;
    public static final String lineDelimit = System.getProperty("line.separator");
    public static final boolean useEmbeds = true; // Discord says we shall support a text-only fallback
    public static final boolean Dev_Powersave = false;
    protected ConcurrentHashMap<String, GitRepo> repositories;
    JDA jda;
    String token;

    private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);


    public static void main(String[] args) {
        Main main = new Main();
        main.main();

        // @TODO: Handle duplicate class names where we'd need a package to distinquish
    }

    public void main() {
        LOGGER.info("jMonkeyDiscordBot booting up");
        File tokenFile = new File("token.txt");
        if (tokenFile.exists()) {
            try {
                LOGGER.info("Taking Discord Token from token.txt");
                token = Files.readAllLines(tokenFile.toPath()).get(0);
            } catch (Exception e) {
                System.out.println("Error when reading token file!");
                e.printStackTrace();
            }
        } else {
            LOGGER.info("Taking Discord Token from environment variable BOT_TOKEN");
            token = System.getenv("BOT_TOKEN");
        }

        LOGGER.info("Fetching repositories for code assistance: Engine");
        repositories = new ConcurrentHashMap<>();
        GitRepo repoEngine = new GitRepo("engine", "https://github.com/jMonkeyEngine/jmonkeyengine", Stream.of("master", "v3.5.2-stable"));
        repoEngine.tickUpdate();
        repositories.put("engine", repoEngine);

        LOGGER.info("Fetching repositories for code assistance: SDK");
        // @TODO: We don't need/want to specify the branches here manually but want them to be extracted of the repo
        GitRepo repoSdk = new GitRepo("sdk", "https://github.com/jMonkeyEngine/sdk", Stream.of("master"));
        repoSdk.tickUpdate();
        repositories.put("sdk", repoSdk);
        /*
        JavaClass clazz = findClassByNameIgnoreCase("Vector3f");
        Method m = clazz.findMethodBothCases("addLocal");

        System.out.println("Found " + m.getMethodCount() + " method(s)");
        for (int i = 0; i < m.getMethodCount(); i++) {
            System.out.println(new MethodInformation(m, i).toString());
        }
        */

        //System.out.println(new MethodInformation(m, 0).getGithubLink(new BranchOrCommit("master", false), clazz));
        //System.out.println(new MethodInformation(m, 0).getJavadocLink(new BranchOrCommit("master", false), clazz));
        //System.out.println(m.getContent(0));
        //System.out.println(clazz.getContentFromTo(203, 212));

        LOGGER.info("Connecting to Discord");
        // @TODO: maybe add a new field command so we don't have the separation of javadoc/code for fields.
        initDiscordAPI();
    }

    protected void initDiscordAPI() {
        CommandClientBuilder client = new CommandClientBuilder();
        client
            .useDefaultGame()
            .setPrefix("!")
            /* This has to be set, it's also who is listed in the !help command, which is autogenerated. */
            .setOwnerId("230439624521023489")
            .addCommand(new JavadocCommand(this))
            .addCommand(new SearchCommand(this));

        try {
            jda = JDABuilder.createDefault(token)
                    .setStatus(OnlineStatus.ONLINE)
                    .setActivity(Activity.playing("jMonkeyEngine"))
                    // The EventWaiter is used to track down replies to our questions. But this event waiter needs to be an event listener then
                    //.addEventListener(new EventWaiter()) // DO we really need this?
                    .addEventListeners(client.build())
                    .build().awaitReady();
        } catch (LoginException login) {
            login.printStackTrace();
        } catch (InterruptedException inter) {
            inter.printStackTrace();
            Thread.currentThread().interrupt();
        }
    }

    public ConcurrentHashMap<String, GitRepo> getRepositories() {
        return repositories;
    }
}
